Daa
------------------------------------------------------------------------------------------------------------------------------------------
fibonacci

def recursive_fibonacci(n):
    if n <= 1:
        return n
    else:
        return recursive_fibonacci(n-1)+recursive_fibonacci(n-2)

def nonrecursive_fibonacci(n):
    first =0
    second =1
    print(first)
    print(second)
    while n-2 >0:
        third = first + second
        first = second
        second = third
        print(third)
        n -= 1

if __name__=="__main__":
    n = int(input("Enter the number of fibonacci numbers to generate:"))

    print("Recursive Function :")
    for i in range(n):
        print(recursive_fibonacci(i))

    print("Non Recursive Function :")
    nonrecursive_fibonacci(n)

-------------------------------------------------------------------------------------------------------------------------------------

Explanation :

Your code contains two functions for generating Fibonacci numbers: recursive_fibonacci and nonrecursive_fibonacci. These functions use different approaches to generate Fibonacci numbers, and there are significant differences between them, especially in terms of time complexity.

Recursive Fibonacci (recursive_fibonacci):

This function uses a recursive approach to calculate Fibonacci numbers.
The base case is when n is less than or equal to 1, in which case it returns n.
For values of n greater than 1, it recursively calls itself to calculate recursive_fibonacci(n-1) and recursive_fibonacci(n-2) and adds them together.
The time complexity of the recursive Fibonacci algorithm is exponential, specifically O(2^n). This is because it recalculates the same Fibonacci numbers multiple times, resulting in a large number of redundant calculations.
Non-Recursive Fibonacci (nonrecursive_fibonacci):

This function uses an iterative approach to calculate Fibonacci numbers.
It starts with two initial values, first and second, which are set to 0 and 1, respectively.
It then enters a loop that runs n-2 times to generate the first n Fibonacci numbers.
In each iteration, it calculates the next Fibonacci number by adding first and second, updates first and second accordingly, and prints the current Fibonacci number.
The time complexity of the non-recursive Fibonacci algorithm is O(n). It calculates each Fibonacci number once and stores them, avoiding the redundant calculations that occur in the recursive approach.
In summary, the key difference between the two approaches is in the time complexity. The recursive approach has an exponential time complexity (O(2^n)), making it highly inefficient for large values of n, while the non-recursive approach has a linear time complexity (O(n)), making it much more efficient for generating a large number of Fibonacci numbers. The non-recursive approach is generally preferred for practical purposes when efficiency is a concern.


__________________________________________________________________________________________________________________________________________
huffman

import heapq

class Node:
    def __init__(self, freq, symbol, left=None, right=None):
        self.freq = freq
        self.symbol = symbol
        self.left = left
        self.right = right
        self.huff = ''

    def __lt__(self, nxt):
        return self.freq < nxt.freq

def printNodes(node, val=''):
    newVal = val + str(node.huff)
    if node.left:
        printNodes(node.left, newVal)
    if node.right:
        printNodes(node.right, newVal)
    if not node.left and not node.right:
        print(f"{node.symbol} -> {newVal}")

def main():
    chars = []
    freq = []
    n = int(input("Enter the number of characters: "))

    for i in range(n):
        char = input(f"Enter character {i + 1}: ")
        frequency = int(input(f"Enter frequency for character {char}: "))
        chars.append(char)
        freq.append(frequency)

    nodes = []

    for x in range(len(chars)):
        heapq.heappush(nodes, Node(freq[x], chars[x]))

    while len(nodes) > 1:
        left = heapq.heappop(nodes)
        right = heapq.heappop(nodes)
        left.huff = '0'
        right.huff = '1'
        newNode = Node(left.freq + right.freq, left.symbol + right.symbol, left, right)
        heapq.heappush(nodes, newNode)

    print("Huffman Codes: ")
    printNodes(nodes[0])

if __name__ == "__main__":
    main()


-------------------------------------------------------------------------------------------------------------------------------------


The provided code is an implementation of the Huffman coding algorithm. Huffman coding is a variable-length prefix coding algorithm used for data compression. It assigns shorter codes to more frequent characters and longer codes to less frequent characters. Here's how the code works and its time complexity analysis:

Node Class:

Represents a node in the Huffman tree.
It has attributes for character frequency (freq), character symbol (symbol), left and right child nodes (left and right), and the Huffman code (huff) associated with the node.
The __lt__ method is defined to allow comparison of nodes based on their frequencies for heap operations.
printNodes Function:

Recursively traverses the Huffman tree and prints the character symbols along with their Huffman codes.
main Function:

It starts by taking user input for the number of characters and their frequencies.
It creates a list of Node objects for each character and frequency pair.
These nodes are pushed into a min-heap (nodes) to maintain them in order of increasing frequency.
Huffman Tree Construction:

The while loop runs until there is only one node left in the heap.
In each iteration, the two nodes with the lowest frequencies are removed from the heap.
Their huff attributes are set to '0' and '1' for left and right, respectively.
A new node is created with the combined frequency of the two nodes and is added back to the heap.
This process continues until only one node (the root of the Huffman tree) remains in the heap.
Huffman Codes Printing:

After the Huffman tree is constructed, the printNodes function is called to print the Huffman codes for each character symbol.
Time Complexity Analysis:

Creating the initial list of Node objects and pushing them onto the min-heap takes O(n * log n) time, where 'n' is the number of characters.
The while loop runs 'n-1' times, where 'n' is the number of characters, and in each iteration, it performs heap operations which have a time complexity of O(log n).
Therefore, the overall time complexity of constructing the Huffman tree is O(n * log n).
The printNodes function recursively traverses the tree and prints the Huffman codes for each character, which takes O(n) time.
Thus, the overall time complexity of the code is dominated by the tree construction and is O(n * log n).
Huffman coding is an efficient way to compress data, and this code efficiently generates the Huffman codes for a set of characters based on their frequencies


________________________________________________________________________________________________________________________________________
Fractional Knapsack:

class Item:
    def __init__(self, weight, value):
        self.weight = weight
        self.value = value
        self.value_per_weight = value / weight


def knapsack_fractional(items, capacity):
    items.sort(key=lambda item: item.value_per_weight, reverse=True)
    total_value = 0
    knapsack = []

    for item in items:
        if capacity == 0:
            break

        weight_to_take = min(item.weight, capacity)
        total_value += weight_to_take * item.value_per_weight
        capacity -= weight_to_take
        knapsack.append((item, weight_to_take))

    return total_value, knapsack


def main():
    n = int(input("Enter the number of items: "))
    items = []

    for i in range(n):
        weight, value = map(int, input(f"Enter weight and value for item {i + 1}: ").split())
        items.append(Item(weight, value))

    capacity = int(input("Enter the knapsack capacity: "))
    total_value, knapsack = knapsack_fractional(items, capacity)

    print("Knapsack items and their fractions:")
    for item, fraction in knapsack:
        print(f"Item with weight {item.weight}, value {item.value}: Fraction taken = {fraction}")

    print("Total value in knapsack:", total_value)


if __name__ == "__main__":
    main()

--------------------------------------------------------------------------------------------------------------------------------------
Certainly! Let's go through the code with an example to help illustrate how it works.

Suppose you have a set of items with their weights and values and a knapsack with a given capacity. The goal is to select items from the set to maximize the total value in the knapsack while respecting the capacity constraint. The code uses the Fractional Knapsack algorithm to achieve this.

Example:
Let's use the following example to demonstrate the code:

Number of items (n): 4
Items with their weights and values:
Item 1: Weight = 10, Value = 60
Item 2: Weight = 20, Value = 100
Item 3: Weight = 30, Value = 120
Item 4: Weight = 5, Value = 30
Knapsack capacity: 50
Here's how the code works with this example:

The code starts by taking user input for the number of items, their weights, and values, and the capacity of the knapsack.

It creates a list of Item objects to represent the items. Each Item object stores its weight, value, and the value-to-weight ratio.

The knapsack_fractional function is called with the list of items and the knapsack capacity. This function implements the Fractional Knapsack algorithm.

Inside knapsack_fractional:

It sorts the items in descending order based on their value-to-weight ratio, which is a greedy choice to select items with the highest value-to-weight ratio first.
It initializes variables for the total value (total_value) and a list to keep track of items added to the knapsack (knapsack).
The code then iterates through the sorted items:

For each item, it checks if there is enough capacity left in the knapsack. If there's not enough capacity to take the entire item, it takes a fraction of it.
The code calculates the amount of the item that can be added to the knapsack (either the whole item or a fraction of it), updates the total value, reduces the knapsack's remaining capacity, and records the item and the fraction added in knapsack.
The knapsack_fractional function returns the total_value and the list of items and their respective fractions in the knapsack.

In the main function:

The code prints the items and their fractions in the knapsack, along with the total value.

O(n log n)
__________________________________________________________________________________________________________________________________________

0-1 Knapsack


def knapsack_01(weights, values, capacity):
    n = len(weights)
    dp = [[0] * (capacity + 1) for _ in range(n + 1)]
    for i in range(1, n + 1):
        for w in range(capacity + 1):
            if weights[i - 1] <= w:
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1])
            else:
                dp[i][w] = dp[i - 1][w]
    return dp[n][capacity]

def main():
    n = int(input("Enter the number of items: "))
    weights = list(map(int, input("Enter the weights of items: ").split()))
    values = list(map(int, input("Enter the values of items: ").split()))
    capacity = int(input("Enter the knapsack capacity: "))
    max_value = knapsack_01(weights, values, capacity)
    print("Maximum value that can be obtained:", max_value)

if __name__ == "__main__":
    main()



-----------------------------------------------------------------------------------------------------------------------------------------
The provided code is an implementation of the 0/1 Knapsack problem using dynamic programming. It calculates the maximum value that can be obtained by selecting items with given weights and values while respecting the capacity constraint of the knapsack. Here's how the code works:

knapsack_01 Function:

Takes three lists as input: weights, values, and the knapsack capacity.
Initializes a 2D table dp with dimensions (n + 1) x (capacity + 1), where 'n' is the number of items.
The table dp[i][w] represents the maximum value that can be obtained by selecting items up to the i-th item (from 1 to n) while having a knapsack capacity of 'w'.
It iterates through each item (from 1 to n) and each possible knapsack capacity (from 0 to the given capacity).
For each item, it calculates the maximum value considering two possibilities:
Including the current item if its weight is less than or equal to the current knapsack capacity, which is given by dp[i-1][w-weights[i-1]] + values[i-1].
Excluding the current item, which is given by dp[i-1][w].
It assigns the maximum of the two possibilities to dp[i][w].
main Function:

Takes user input for the number of items, the weights of the items, their values, and the knapsack capacity.
Calls the knapsack_01 function to calculate the maximum value that can be obtained with the given input.
Prints the maximum value that can be obtained.

_________________________________________________________________________________________________________________________________________

Nqueens
-----------------------------------------------------------------------------------------------------------------------------------------


def is_safe(board, row, col, n):
    # Check the column
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check upper-left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check upper-right diagonal
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens(board, row, n):
    if row >= n:
        return True

    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1
            if solve_n_queens(board, row + 1, n):
                return True
            board[row][col] = 0

    return False

def print_board(board):
    for row in board:
        print(" ".join("Q" if cell == 1 else "." for cell in row))

def main():
    n = int(input("Enter the value of N: "))
    first_queen_col = int(input("Enter the column index (0-indexed) of the first queen: "))

    board = [[0 for _ in range(n)] for _ in range(n)]
    board[0][first_queen_col] = 1

    if solve_n_queens(board, 1, n):
        print("N-Queens matrix:")
        print_board(board)
    else:
        print("No solution exists for the given configuration.")

if __name__ == "__main__":
    main()









----------------------------------------------------------------------------------------------------------------------------------------

The provided code is an implementation of the N-Queens problem, which is a classic combinatorial puzzle. The problem is to place N queens on an N×N chessboard in such a way that no two queens attack each other. In this code, the problem is solved using a backtracking algorithm.

Here's how the code works:

is_safe Function:

Determines if it's safe to place a queen at a given position (row, col) on the chessboard.
It checks three conditions to ensure the queen is safe:
No other queens in the same row (horizontal check).
No other queens in the diagonal going from the current position up to the left corner of the board (upper-left to lower-right diagonal check).
No other queens in the diagonal going from the current position down to the left corner of the board (lower-left to upper-right diagonal check).
solve_n_queens Function:

Uses backtracking to find a solution to the N-Queens problem.
It tries to place queens one by one in columns from left to right.
If a queen can be placed in a column without violating any of the conditions checked by is_safe, it proceeds to the next column.
If all queens are placed successfully, it returns True, indicating a solution is found.
If it cannot place all queens in a column, it backtracks by changing the placement of previous queens and tries a different arrangement.
print_board Function:

Prints the N-Queens board with 'Q' representing queens and '.' representing empty cells.
main Function:

Takes user input for the board size (N) and the column index of the first queen.
Initializes an empty chessboard of size N×N and places the first queen at the specified column.
Calls the solve_n_queens function to find a solution and, if successful, prints the resulting N-Queens board. If no solution exists, it informs the user

__________________________________________________________________________________________________________________________________________